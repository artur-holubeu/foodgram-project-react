name: FoodGram CL-CD

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: | 
        # обновление pip
        python -m pip install --upgrade pip 
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # установка зависимостей
        pip install -r backend/requirements.txt

    - name: Test with flake8 and django tests
      run: |
        # запуск проверки проекта по flake8
        python -m flake8
#        python -m pytest

  build_and_push_backend_to_docker_hub:
      name: Push Docker image BACKEND to Docker Hub
      runs-on: ubuntu-latest

      needs: tests

      if: github.ref == 'refs/heads/master'

      steps:
        - name: Check out the repo
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to Docker
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            context: ./backend/
            file: ./backend/Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_and_push_frontend_to_docker_hub:
    name: Push Docker image FRONTEND to Docker Hub
    runs-on: ubuntu-latest

    needs: tests

    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          path: frontend
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest

    needs: [build_and_push_frontend_to_docker_hub, build_and_push_backend_to_docker_hub]

    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          stack_file_name: docker-compose.yaml
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
            sudo docker-compose rm frontend
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d
            sudo docker-compose exec -T backend python manage.py collectstatic --no-input
            sudo docker-compose exec -T backend python manage.py loaddata fixtures.json

  send_message:
    runs-on: ubuntu-latest

    needs: deploy

    steps:
      - name: Telegram Message Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!